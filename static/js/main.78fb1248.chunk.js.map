{"version":3,"sources":["components/CalendarHead.js","components/CalendarBody.js","Calendar.js","serviceWorker.js","index.js"],"names":["CalendarHead","props","arrowClicked","isBackArrow","activeMonth","activeYear","listType","year","yearForList","listYear","month","setState","activeDatePeriodValue","months","fullName","updateCalendarState","datePeriodClicked","periodValue","type","state","this","Grid","centered","Column","width","Button","onClick","icon","size","circular","PureComponent","weekdays","CalendarBody","getDays","days","getList","datetime","day","Date","getDay","getDayForDate","getMonths","getYears","value","key","getDisplayBtn","textAlign","className","getEmptyDisplayBtn","len","Array","apply","length","map","Number","date","i","baseYear","endYear","style","marginLeft","marginRight","marginTop","columns","backgroundColor","Calendar","getFullYear","getMonth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78fb1248.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { months } from '../data/months.json';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\n\r\nclass CalendarHead extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    const { activeMonth } = props;\r\n    this.state = {\r\n      activeDatePeriodValue: months[activeMonth].fullName\r\n    };\r\n  }\r\n\r\n  /*\r\n    getDerivedStateFromProps because parent state was changing and\r\n    to calculate state change for this component based on parent's state    \r\n  */\r\n  static getDerivedStateFromProps(props) {\r\n    const { listType, activeMonth, activeYear } = props;\r\n    return {\r\n      activeDatePeriodValue:\r\n        listType === 0 ? months[activeMonth].fullName : activeYear\r\n    };\r\n  }\r\n\r\n  arrowClicked = isBackArrow => {\r\n    let { activeMonth, activeYear, listType, listYear } = this.props;\r\n    let year = activeYear;\r\n    let yearForList = listYear;\r\n    let month = activeMonth;\r\n    if (isBackArrow) {\r\n      if (listType === 0) {\r\n        if (activeMonth === 0) {\r\n          month = 11;\r\n          year -= 1;\r\n        } else {\r\n          month -= 1;\r\n        }\r\n      } else if (listType === 1) {\r\n        year -= 1;\r\n        yearForList -= 1;\r\n      } else {\r\n        yearForList -= 19;\r\n      }\r\n    } else {\r\n      if (listType === 0) {\r\n        if (activeMonth === 11) {\r\n          month = 0;\r\n          year += 1;\r\n        } else {\r\n          month += 1;\r\n        }\r\n      } else if (listType === 1) {\r\n        year += 1;\r\n        yearForList += 1;\r\n      } else {\r\n        yearForList += 19;\r\n      }\r\n    }\r\n    this.setState({\r\n      activeDatePeriodValue: listType === 0 ? months[month].fullName : year\r\n    });\r\n    this.props.updateCalendarState('activeMonth', month);\r\n    this.props.updateCalendarState('activeYear', year);\r\n    this.props.updateCalendarState('listYear', yearForList);\r\n  };\r\n\r\n  datePeriodClicked = () => {\r\n    const { listType, activeYear, activeMonth } = this.props;\r\n    let periodValue = activeYear;\r\n    let type = listType > 1 ? 1 : listType + 1;\r\n    if (type === 0) {\r\n      periodValue = months[activeMonth].fullName;\r\n    }\r\n    this.setState({\r\n      activeDatePeriodValue: periodValue\r\n    });\r\n    this.props.updateCalendarState('listType', type);\r\n  };\r\n\r\n  render() {\r\n    const { activeDatePeriodValue } = this.state;\r\n    return (\r\n      <Grid centered>\r\n        <Grid.Column width={4}>\r\n          <Button\r\n            onClick={() => this.arrowClicked(true)}\r\n            icon=\"left arrow\"\r\n            size=\"medium\"\r\n            circular\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={5}>\r\n          <Button size=\"large\" onClick={this.datePeriodClicked}>\r\n            {activeDatePeriodValue}\r\n          </Button>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Button\r\n            onClick={() => this.arrowClicked(false)}\r\n            icon=\"right arrow\"\r\n            size=\"medium\"\r\n            circular\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarHead;\r\n","import React, { PureComponent } from 'react';\r\nimport { months } from '../data/months.json';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport './calendar.css';\r\n\r\nconst weekdays = ['SUN', 'MON', 'TUES', 'WED', 'THUR', 'FRI', 'SAT'];\r\n\r\nclass CalendarBody extends PureComponent {\r\n  getDays = () => {\r\n    const { activeMonth, activeYear } = this.props;\r\n    if (activeYear % 4 === 0 && activeMonth === 1) {\r\n      if (activeYear % 100 === 0) {\r\n        if (activeYear % 400 === 0) {\r\n          return 29;\r\n        }\r\n        return 28;\r\n      }\r\n      return 29;\r\n    } else {\r\n      return months[activeMonth].days;\r\n    }\r\n  };\r\n\r\n  getList = () => {\r\n    const { listType, activeMonth, activeYear, listYear } = this.props;\r\n    const datetime = `${months[activeMonth].fullName} 1, ${activeYear} 00:00:01`;\r\n    const day = new Date(datetime).getDay();\r\n    const days = this.getDays();\r\n    if (listType === 0) {\r\n      return this.getDayForDate(day, days);\r\n    } else if (listType === 1) {\r\n      return this.getMonths();\r\n    } else {\r\n      return this.getYears(listYear);\r\n    }\r\n  };\r\n\r\n  datePeriodClicked = value => {\r\n    const { listType, updateCalendarState } = this.props;\r\n    let key = '';\r\n    if (listType === 1) {\r\n      key = 'activeMonth';\r\n    } else if (listType === 2) {\r\n      key = 'activeYear';\r\n      updateCalendarState('listYear', value);\r\n    }\r\n    updateCalendarState(key, value);\r\n    updateCalendarState(\r\n      'listType',\r\n      listType !== 0 ? (listType === 2 ? 1 : 0) : listType\r\n    );\r\n  };\r\n\r\n  getDisplayBtn = (key, value) => {\r\n    return (\r\n      <Grid.Column\r\n        onClick={() => this.datePeriodClicked(key)}\r\n        size=\"medium\"\r\n        key={key}\r\n        textAlign=\"center\"\r\n        className=\"dateValueBtn\"\r\n      >\r\n        {value}\r\n      </Grid.Column>\r\n    );\r\n  };\r\n\r\n  getEmptyDisplayBtn = key => {\r\n    return <Grid.Column key={key} className=\"dateValueBtnEmpty\" />;\r\n  };\r\n\r\n  getDayForDate = (day, days) => {\r\n    const len = days + day <= 35 ? 35 : 42;\r\n    return Array.apply(null, {\r\n      length: len\r\n    }).map((Number, date) => {\r\n      return date >= day && date < days + day\r\n        ? this.getDisplayBtn(date - day - 1, date - day + 1)\r\n        : this.getEmptyDisplayBtn(date - day - 1);\r\n    });\r\n  };\r\n\r\n  getMonths = () => {\r\n    return months.map((month, i) => {\r\n      return this.getDisplayBtn(i, month.fullName);\r\n    });\r\n  };\r\n\r\n  getYears = activeYear => {\r\n    const baseYear = activeYear - 9;\r\n    const endYear = activeYear + 10;\r\n    return Array.apply(null, {\r\n      length: endYear - baseYear + 1\r\n    }).map((Number, year) => {\r\n      const value = year + baseYear;\r\n      return this.getDisplayBtn(value, value);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { listType } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          width: '80%',\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n          marginTop: '5px'\r\n        }}\r\n      >\r\n        {listType === 0 && (\r\n          <Grid\r\n            columns={7}\r\n            textAlign=\"center\"\r\n            style={{ backgroundColor: '#bdbdbd' }}\r\n          >\r\n            {weekdays.map((day, i) => {\r\n              return <Grid.Column key={i}>{day}</Grid.Column>;\r\n            })}\r\n          </Grid>\r\n        )}\r\n        <Grid columns={listType === 0 ? 7 : 4} style={{}}>\r\n          {this.getList()}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarBody;\r\n","import React, { PureComponent } from 'react';\r\nimport CalendarHead from './components/CalendarHead';\r\nimport CalendarBody from './components/CalendarBody';\r\nimport './Calendar.css';\r\n\r\nclass Calendar extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    const date = new Date();\r\n    const activeYear = date.getFullYear();\r\n    const activeMonth = date.getMonth();\r\n    const listYear = activeYear;\r\n    this.state = {\r\n      activeMonth,\r\n      activeYear,\r\n      listYear,\r\n      listType: 2\r\n    };\r\n  }\r\n\r\n  updateCalendarState = (key, value) =>\r\n    this.setState({\r\n      [key]: value\r\n    });\r\n\r\n  render() {\r\n    const { activeMonth, activeYear, listType, listYear } = this.state;\r\n    return (\r\n      <div style={{ marginTop: '10px' }}>\r\n        <CalendarHead\r\n          activeMonth={activeMonth}\r\n          updateCalendarState={this.updateCalendarState}\r\n          listType={listType}\r\n          activeYear={activeYear}\r\n          listYear={listYear}\r\n        />\r\n        <CalendarBody\r\n          updateCalendarState={this.updateCalendarState}\r\n          activeMonth={activeMonth}\r\n          activeYear={activeYear}\r\n          listType={listType}\r\n          listYear={listYear}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Calendar from './Calendar';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Calendar />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}